@using GreenPrint.Blazor.Models
@using GreenPrint.Blazor.Service.Intefaces
@using GreenPrint.Blazor.Utility
@using System.Text.Json;

@inject IndexedDbAccessor _indexedDbAccessor
@inject NavigationManager _navigationManager
@inject CookieAccessor _cookieAccessor
@inject LocalStorage _localStorage
@inject NotificationService _notificationService
@inject IItemService _itemService
@inject IWarehouseItemService _warehouseItemService

<RadzenNotification/>
<!--Featured Carousel-->
<div id="carouselExampleSlidesOnly" class="carousel slide" data-bs-ride="carousel">
    <div class="carousel-inner">
        <div class="carousel-item active">
            <div class="row">
                @foreach (var itemview in Items.Take(4))
                {
                    <div class="col-3 mt-2">
                        <div class="card">
                            <a @onclick='() => _navigationManager.NavigateTo("/Items/Item/" + itemview.Id)' style="text-decoration:none;color:black;cursor:pointer">
                                @if (itemview.ItemImages.Count > 0)
                                {
                                    <img loading="lazy" src="/Images/Items/@itemview.ItemImages.First().ImageUrl" class="card-img-top" alt="...">
                                }
                                else
                                {
                                    <img src="/Images/Items/No_image_available.svg" class="card-img-top" alt="...">
                                }

                                <div class="card-body">
                                    <h5 class="card-title">@itemview.ItemName</h5>
                                    <p class="card-text">@itemview.Description</p>
                                    <p class="card-text">@($"{itemview.Price:C}")</p>
                                </div>
                            </a>
                            <div class="card-footer text-center">
                                <RadzenButton Shade="Shade.Lighter" Click=@(args => AddToCart(itemview.Id)) Text="Add To Cart" ButtonStyle="ButtonStyle.Primary" />
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        @if (Items.Count > 4)
        {
            <div class="carousel-item">
                <div class="row">
                    @foreach (var itemview in Items.Skip(4).Take(4))
                    {
                        <div class="col-3 mt-2">
                            <div class="card">
                                <a @onclick='() => _navigationManager.NavigateTo("/Items/Item/" + itemview.Id)' style="text-decoration:none;color:black;cursor:pointer">
                                    @if (itemview.ItemImages.Count > 0)
                                    {
                                        <img loading="lazy" src="/Images/Items/@itemview.ItemImages.First().ImageUrl" class="card-img-top" alt="...">
                                    }
                                    else
                                    {
                                        <img loading="lazy" src="/Images/Items/No_image_available.svg" class="card-img-top" alt="...">
                                    }

                                    <div class="card-body">
                                        <h5 class="card-title">@itemview.ItemName</h5>
                                        <p class="card-text">@itemview.Description</p>
                                        <p class="card-text">@($"{itemview.Price:C}")</p>
                                    </div>
                                </a>
                                <div class="card-footer text-center">
                                    <RadzenButton Shade="Shade.Lighter" Click=@(args => AddToCart(itemview.Id)) Text="Add To Cart" ButtonStyle="ButtonStyle.Primary" />
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public List<Item> Items { get; set; }

    private async Task AddToCart(int itemId)
    {
        var item = await _itemService.GetItemByIdAsync(itemId);
        var warehouseItems = await _warehouseItemService.GetAllByByItemId(itemId);

        string? storage = await _localStorage.GetValueAsync<string>("Cart");
        List<WarehouseItem> ordredItems = new();

        if (storage == null)
        {
            ordredItems.Add(new()
                {
                    Id = warehouseItems[0].Id,
                    WarehouseId = warehouseItems[0].WarehouseId,
                    ItemId = itemId,
                    Quantity = 1
                });

            string serializedItems = JsonSerializer.Serialize(ordredItems);
            await _localStorage.SetValueAsync("Cart", serializedItems);
        } // If cookie exists
        else
        {
            ordredItems = JsonSerializer.Deserialize<List<WarehouseItem>>(storage);

            // Check if the item is already in the cart
            if (ordredItems.Where(wp => wp.ItemId == itemId).Any())
            {
                ordredItems.Single(wp => wp.ItemId == itemId).Quantity++;
            } // Else add it to the cart
            else
            {
                ordredItems.Add(new()
                    {
                        Id = warehouseItems[0].Id,
                        WarehouseId = warehouseItems[0].WarehouseId,
                        ItemId = itemId,
                        Quantity = 1
                    });
            }
            string serializedItems = JsonSerializer.Serialize(ordredItems);
            await _localStorage.SetValueAsync("Cart", serializedItems);
        }


        _notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = $"{item.ItemName} added to cart", Duration = 4000 });
    }
}
