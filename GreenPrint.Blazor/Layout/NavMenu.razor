@using GreenPrint.Blazor.Utility
@using System.Text.Json;
@using GreenPrint.Blazor.Models

@inject IndexedDbAccessor _indexedDbAccessor
@inject CookieAccessor _cookieAccessor
@inject LocalStorage _localStorage

<script src="https://kit.fontawesome.com/b87b53de45.js" crossorigin="anonymous"></script>
<nav class="navbar navbar-expand-lg bg-body-tertiary">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">
            <img src="/Images/GPlo.png" alt="Bootstrap" width="30" height="24">
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <div class="col-10">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page">Home</a>
                    </li>
                </ul>
            </div>
            <div class="col-2 justify-content-end">
                <ul class="navbar-nav">
                    <li>
                        <a asp-page="/Items/Cart" class="p-0 pt-2 ps-1 nav-link">
                            <i class="fa-solid fa-cart-shopping"></i>
                            <span class="badge badge-warning" style="transform: translate(-10px,-10px);">
                                <span class="badge bg-primary">@CartCount</span>
                            </span>
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</nav>

@code {

    public int CartCount { get; set; }

    protected override async Task OnInitializedAsync()
    {
        string? storage = await _localStorage.GetValueAsync<string>("Cart");

        if (storage != null)
        {
            var storedValue = JsonSerializer.Deserialize<List<WarehouseItem>>(storage);
            CartCount = storedValue.Sum(wi => wi.Quantity);
        }
        else
        {
            CartCount = 0;
        }

        
        


        // JsonDocument cart = await _indexedDbAccessor.GetAllAsync<JsonDocument>("items");
        // var storedValue = JsonSerializer.Deserialize<List<WarehouseItem>>(cart.RootElement);


        await base.OnInitializedAsync();
    }
}
